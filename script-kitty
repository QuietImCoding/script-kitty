#!/bin/bash

# Used to let scripts find their own folders
_kitty_laser_pointer='echo $( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )'
export _kitty_laser_pointer

_find_repo_name() {
    unslashed=$(echo "$1" | rev | cut -d'/' -f1 | rev)
    echo $unslashed | cut -d'@' -f1
}

_find_bash_config() {
    if [[ -f ~/.bash_profile ]]; then echo "$HOME/.bash_profile";
    else echo "$HOME/.bashrc"; fi
}

_kitty_run_installer() {
    yarn_name="$(_find_repo_name $1)"
    install_loc="$yarn_name.install"
    owd=$(pwd)
    cd "$KITTY_HOME/yarn_pile/$yarn_name" || return
    if  [[ -f $install_loc ]]; then
	echo "Kitty is trying to install $1..."
	./$install_loc ||
	    echo "Something went wrong installing... kitty is sorry ;-;" &&
		return
	echo "Kitty has installed $1"
    else
	echo "Kitty found no installer for $1"
    fi
    cd $owd
}

_kitty_install() {
    conf=$(_find_bash_config)
    if grep -q "SCRIPT_KITTY_MAGIC_YARNBALL" $conf; then
	kitty update
	kitty add $1
	kitty pull
	_kitty_run_installer $1
	source $conf
    else
	KITTY_HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
	export KITTY_HOME
	echo "## SCRIPT_KITTY_MAGIC_YARNBALL ##" >> $con
	echo "export KITTY_HOME=$KITTY_HOME" >> $conf
	read -p "Kitty needs a github: " KITTY_USER
	echo "export KITTY_USER=$KITTY_USER" >> $conf
	echo "source $KITTY_HOME/script-kitty" >> $conf
	echo "## END_MAGIC_YARNBALL ##" >> $conf
	cat "$KITTY_HOME/kitty_completion" >> ~/.bash_completion
	touch "$KITTY_HOME/.kitty_yarn"
	mkdir "$KITTY_HOME/yarn_pile"
    fi
}

_lookup_yarnstore() {
    echo "$(grep "$1\t" "$KITTY_HOME/.yarn_stores" | rev | cut -d$'\t' -f1 | rev)"
}

_kitty_link() {
    conf="$(_find_bash_config)"
    kitty_end="## END_MAGIC_YARNBALL ##"
    yarn_home="$KITTY_HOME/yarn_pile/$1/$1"
    sed -i '' "s:$kitty_end:source $yarn_home\\$(printf '\n')
$kitty_end:g" $conf
}

_kitty_pull() {
    echo "Kitty is tugging on loose ends..."
    conf="$(_find_bash_config)"
    for yarnball in $(cat "$KITTY_HOME/.kitty_yarn"); do
	yarn_name="$(_find_repo_name $yarnball)"
	yarn_loc="$(echo $yarnball | cut -d'@' -f1)"
	yarn_dir="$KITTY_HOME/yarn_pile/$yarn_name"
	if [[ -d "$yarn_dir" ]]; then
	    owd=$(pwd)
	    cd "$yarn_dir" || continue
	    git pull &>/dev/null
	    cd $owd
	    echo " - Updated $yarnball"
	else
	    owd=$(pwd)
	    kitty_end="## END_MAGIC_YARNBALL ##"
	    yarn_home="$KITTY_HOME/yarn_pile/$yarn_name/$yarn_name"
	    kitty_domain="https://github.com"
	    if echo "$yarnball" | grep -q '@'; then
		kitty_domain="$(_lookup_yarnstore $(echo $yarnball | rev | cut -d'@' -f1 | rev))"
	    fi
	    cd "$KITTY_HOME/yarn_pile" || continue
	    if echo "$yarnball" | grep -q '/'; then
		git clone "$kitty_domain/$yarn_loc.git" &>"$KITTY_HOME/.kitty_log" ||
		    echo " - Kitty could not find '$yarnball' *sad kitty*" &&
			cd $owd
	    else
		git clone "$kitty_domain/$KITTY_USER/$yarn_name.git" &>"$KITTY_HOME/.kitty_log" ||
		    echo " - Kitty could not find '$yarnball' *sad kitty*" &&
			cd $owd
	    fi
	    cd $owd
	    # This statement is so janky but MacOS sed is terrible
	    # and I don't want to do different things depending on the sed version
	    echo $yarn_home
	    if [[ -f $yarn_home ]]; then
		echo 'oh jeez'
		sed -i '' "s:$kitty_end:source $yarn_home\\$(printf '\n')
$kitty_end:g" $conf
	    fi
	    echo " - Kitty grabbed $yarnball"
	fi
    done
}

_kitty_push() {
    echo "Kitty is gently nudging $1 back to the yarn store"
    owd=$(pwd)
    cleaned_yarn="$(_find_repo_name $1)"
    echo "Kitty notices the yarn is different..."
    read -p "What did you do? " kitty_changes
    cd "$KITTY_HOME/yarn_pile/$cleaned_yarn" || return
    git commit -a -m "$kitty_changes"
    git push -q
    cd $owd
    echo "The yarn store has accepted your modified yarn ball"
}

_kitty_remove() {
    if grep -q "$1" "$KITTY_HOME/.kitty_yarn"; then
	conf="$(_find_bash_config)"
	cleaned_yarn="$(_find_repo_name $1)"
	if [[ $(wc -l < "$KITTY_HOME/.kitty_yarn") -eq 1 ]]; then
	    echo > "$KITTY_HOME/.kitty_yarn"
	else
	    grep -v $1 "$KITTY_HOME/.kitty_yarn" > .tempkitty &&
		mv .tempkitty "$KITTY_HOME/.kitty_yarn"
	    grep -v "$KITTY_HOME/yarn_pile/$cleaned_yarn" "$conf" > .tempkitty &&
		mv .tempkitty "$conf"
	fi
	if [[ -d "$KITTY_HOME/yarn_pile/$cleaned_yarn" ]]; then
	    if [[ -f "$KITTY_HOME/yarn_pile/$cleaned_yarn/$cleaned_yarn.uninstall" ]]
	    then
		$KITTY_HOME/yarn_pile/$cleaned_yarn/$cleaned_yarn.uninstall
	    fi		
	    rm -rf "$KITTY_HOME/yarn_pile/$cleaned_yarn"
	fi
	echo "Kitty threw $1 out the window"
    else
	echo "Kitty couldn't find $1.... Kitty is confused"
    fi
}

_kitty_list() {
    echo "Your kitty has the following yarn balls:"
    for l in $(cat $KITTY_HOME/.kitty_yarn); do
	echo " - $l"
    done
}


_kitty_add() {
    if $(grep -q $1 "$KITTY_HOME/.kitty_yarn"); then
	echo "Yarnball already installed!!"
    else
	echo $1 >> "$KITTY_HOME/.kitty_yarn"
	echo "Added yarnball $1"
    fi
}

_kitty_update() {
    conf=$(_find_bash_config)
    source $conf
    source $KITTY_HOME/kitty_completion
    # source "$KITTY_HOME/script-kitty"
    echo "Updated script-kitty!!"
}

_kitty_open() {
    cleaned_yarn="$(_find_repo_name $1)"
    open_yarn="$KITTY_HOME/yarn_pile/$cleaned_yarn/$cleaned_yarn"
    $EDITOR $open_yarn 2>/dev/null ||
	echo "Could not open $cleaned_yarn... is your \$EDITOR variable set?"
}

_kitty_liststores() {
    echo "You buy your kitty yarn at the following stores:"
    cat "$KITTY_HOME/.yarn_stores"
}

_kitty_addstore() {
    if [[ ${#@} -eq 0 ]]; then
	read -p "Name of yarn store: " storename
	read -p "Store address: " storeaddress
    else
	storename="$1"
	storeaddress="$2"
    fi
    printf "$storename\t$storeaddress\n" >> "$KITTY_HOME/.yarn_stores"
}

kitty() {
    cmd=$1
    shift
    case $cmd in
	'add') 	_kitty_add $@;;
	'remove') _kitty_remove $@;;
	'rm') _kitty_remove $@;;
	'list') _kitty_list $@;;
	'ls') _kitty_list $@;;
	'pull') _kitty_pull $@;;
	'push') _kitty_push $@;;
	'update') _kitty_update $@;;
	'setup') _kitty_run_installer $@;;	
	'install') _kitty_install $@;;
	'open') _kitty_open $@;;
	'cd') cd "$KITTY_HOME/yarn_pile/$1" || return;;
	'edit') _kitty_open $@;;
	'addstore') _kitty_addstore $@;;
	'liststores') _kitty_liststores $@;;	
	*) cat <<EOF
Usage: kitty [cmd] [args]:
       Get set up:
	     * install - does the initial set up or will add + pull
	     * setup <YARNBALL> - if the install script fails, you can use setup to try to run the new installer without adding and pulling again
       Add new yarn balls:
       	     * add [USER/]<YARNBALL>[@STORE] - adds a new yarnball
	     * pull - pulls balls of yarn from your favorite yarn store
	     * install [USER/]<YARNBALL>[@STORE] - adds, pulls + runs install script
       Manage your yarn balls:
	     * list(ls) - list all installed yarnballs
	     * cd - get into the directory for a yarnball
	     * remove(rm) <YARNBALL> - get rid of a yarnball
	     * edit/open <YARNBALL> - open the script for a yarn ball in your default editor
	     * push - if you've made any changes to the yarn ball, kitty will push them back to your yarn store
       Manage yarn stores:
       	      * addstore [STORE] [LOCATION] - create a new store from which to retrive yarnballs. ( by default kitty uses GitHub )
	      * liststores - show all of your yarn stores
EOF
    esac
}

source $KITTY_HOME/kitty_completion
